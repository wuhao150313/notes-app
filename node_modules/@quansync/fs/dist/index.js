import fs from "node:fs";
import { quansync } from "quansync/macro";

//#region src/index.ts
const readFile = quansync({
	sync: (path, options) => fs.readFileSync(path, options),
	async: (path, options) => fs.promises.readFile(path, options)
});
const writeFile = quansync({
	sync: (file, data, options) => fs.writeFileSync(file, data, options),
	async: (file, data, options) => fs.promises.writeFile(file, data, options)
});
const unlink = quansync({
	sync: (path) => fs.unlinkSync(path),
	async: (path) => fs.promises.unlink(path)
});
const access = quansync({
	sync: (path, mode) => fs.accessSync(path, mode),
	async: (path, mode) => fs.promises.access(path, mode)
});
const stat = quansync({
	sync: (path, options) => fs.statSync(path, options),
	async: (path, options) => fs.promises.stat(path, options)
});
const lstat = quansync({
	sync: (path, options) => fs.lstatSync(path, options),
	async: (path, options) => fs.promises.lstat(path, options)
});
const cp = quansync({
	sync: (src, dest, mode) => fs.copyFileSync(src, dest, mode),
	async: (src, dest, mode) => fs.promises.copyFile(src, dest, mode)
});
const rm = quansync({
	sync: (path, options) => fs.rmSync(path, options),
	async: (path, options) => fs.promises.rm(path, options)
});
const mkdir = quansync({
	sync: (path, options) => fs.mkdirSync(path, options),
	async: (path, options) => fs.promises.mkdir(path, options)
});
const rename = quansync({
	sync: (oldPath, newPath) => fs.renameSync(oldPath, newPath),
	async: (oldPath, newPath) => fs.promises.rename(oldPath, newPath)
});
const readdir = quansync({
	sync: (path, options) => fs.readdirSync(path, options),
	async: (path, options) => fs.promises.readdir(path, options)
});
const realpath = quansync({
	sync: (path, options) => fs.realpathSync(path, options),
	async: (path, options) => fs.promises.realpath(path, options)
});

//#endregion
export { access, cp, lstat, mkdir, readFile, readdir, realpath, rename, rm, stat, unlink, writeFile };
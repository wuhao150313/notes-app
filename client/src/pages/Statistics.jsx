import React, { useState, useEffect } from 'react';
import StatisticCard from '../components/StatisticCard';
import Navbar1 from '../components/Navbar1';
import { TreeSelect, List, Spin, Layout } from 'antd';
import {
  getTotalNotes,
  getTotalWords,
  getCategoryCount,
  getTagCount,
  getTopTag,
  getRegistrationTime,
  getLastActive,
  getContinuousDays,
  getMonthlyNotesCount,
  getPeakHour,
  getAverageNoteLength,
  getUpdateFrequency,
  getAverageUpdateCount,
  getLatestUpdatedNote,
  getTopTags,
  getTopCategories,
} from '../api/statisticsApi';
import { useStore } from '@/store/userStore';

const { Content } = Layout;

const Statistics = () => {
  const { user } = useStore();
  const userId = user?.id; // ‰ΩøÁî® store ‰∏≠ÁöÑÁî®Êà∑ id

  const [stats, setStats] = useState({
    totalNotes: 0,
    totalWords: 0,
    categoryCount: 0,
    tagCount: 0,
    topTag: '',
    registrationTime: '',
    lastActive: '',
    continuousDays: 0,
    monthlyNotes: 0,
    peakHour: '',
    averageNoteLength: 0,
    updateFrequency: 0,
    averageUpdateCount: 0,
    latestUpdatedNote: '',
    tags: [], // Â§áÁî®
    categories: [], // Â§áÁî®
    topTags: [],
    topCategories: [],
  });
  const [loading, setLoading] = useState(true);

  // ËæÖÂä©ÊñπÊ≥ïÔºöÂ∞ÜÊó•ÊúüÊ†ºÂºèÂåñ‰∏∫ YYYYÂπ¥MMÊúàDDÊó•
  const formatDate = (dateStr) => {
    const d = new Date(dateStr);
    if (isNaN(d)) return dateStr;
    return `${d.getFullYear()}Âπ¥${(d.getMonth() + 1)
      .toString()
      .padStart(2, '0')}Êúà${d.getDate().toString().padStart(2, '0')}Êó•`;
  };

  useEffect(() => {
    if (!userId) return; // ÂΩìÁî®Êà∑‰∏çÂ≠òÂú®Êó∂‰∏çÂèëËµ∑ËØ∑Ê±Ç
    const fetchStatistics = async () => {
      try {
        setLoading(true);
        const [
          notesRes,
          wordsRes,
          categoryRes,
          tagRes,
          topTagRes,
          registrationTimeRes,
          lastActiveRes,
          continuousDaysRes,
          monthlyNotesRes,
          peakHourRes,
          averageNoteLengthRes,
          updateFrequencyRes,
          averageUpdateCountRes,
          latestUpdatedNoteRes,
          topTagsRes,
          topCategoriesRes,
        ] = await Promise.all([
          getTotalNotes(userId),
          getTotalWords(userId),
          getCategoryCount(userId),
          getTagCount(userId),
          getTopTag(userId),
          getRegistrationTime(userId),
          getLastActive(userId),
          getContinuousDays(userId),
          getMonthlyNotesCount(userId),
          getPeakHour(userId),
          getAverageNoteLength(userId),
          getUpdateFrequency(userId),
          getAverageUpdateCount(userId),
          getLatestUpdatedNote(userId),
          getTopTags(userId),
          getTopCategories(userId),
        ]);

        setStats({
          totalNotes: notesRes.total || 0,
          totalWords: parseInt(wordsRes.totalWords, 10) || 0,
          categoryCount: categoryRes.categoryCount || 0,
          tagCount: tagRes.tagCount || 0,
          topTag: topTagRes.topTag || '',
          registrationTime: registrationTimeRes.registrationTime || '',
          lastActive: lastActiveRes.lastActive || '',
          continuousDays: continuousDaysRes.continuousDays || 0,
          monthlyNotes: monthlyNotesRes.monthlyCount || 0,
          peakHour: peakHourRes.peakHour || '',
          averageNoteLength:
            parseFloat(averageNoteLengthRes.averageNoteLength) || 0,
          updateFrequency: parseFloat(updateFrequencyRes.updateFrequency) || 0,
          averageUpdateCount:
            parseFloat(averageUpdateCountRes.averageUpdateCount) || 0,
          latestUpdatedNote: latestUpdatedNoteRes.latestUpdatedNote || '',
          tags: tagRes.tags || [],
          categories: categoryRes.categories || [],
          topTags: topTagsRes.topTags || [],
          topCategories: topCategoriesRes.topCategories || [],
        });
      } catch (error) {
        console.error('Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØÂ§±Ë¥•:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchStatistics();
  }, [userId]);

  if (loading) {
    return (
      <div
        style={{ display: 'flex', justifyContent: 'center', padding: '40px' }}
      >
        <Spin size="large" tip="Êï∞ÊçÆÂä†ËΩΩ‰∏≠..." />
      </div>
    );
  }

  return (
    <Layout>
      <Navbar1 />
      <Content className="p-6">
        <TreeSelect
          style={{ width: '100%', marginBottom: '24px' }}
          placeholder="ËØ∑ÈÄâÊã©ÂàÜÁ±ªÁ≠õÈÄâ"
        />
        {/* ÁªüËÆ°Âç°ÁâáÂå∫Âüü */}
        <div
          style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(5, 1fr)',
            gap: '16px',
            marginBottom: '24px',
          }}
        >
          <StatisticCard title="ÊÄªÁ¨îËÆ∞Êï∞" value={`${stats.totalNotes}ÁØá`} />
          <StatisticCard title="ÊÄªÂ≠óÊï∞" value={`${stats.totalWords}Â≠ó`} />
          <StatisticCard title="ÂàÜÁ±ªÊï∞Èáè" value={`${stats.categoryCount}Á±ª`} />
          <StatisticCard title="Ê†áÁ≠æÊÄªÊï∞" value={`${stats.tagCount}‰∏™`} />
          <StatisticCard title="È´òÈ¢ëÊ†áÁ≠æ" value={stats.topTag} />
          <StatisticCard
            title="Ê≥®ÂÜåÊó∂Èó¥"
            value={formatDate(stats.registrationTime)}
          />
          <StatisticCard
            title="ÊúÄËøëÊ¥ªË∑É"
            value={formatDate(stats.lastActive)}
          />
          <StatisticCard
            title="ËøûÁª≠Âàõ‰ΩúÂ§©Êï∞"
            value={`${stats.continuousDays}Â§©`}
          />
          <StatisticCard title="Êú¨ÊúàÂàõ‰ΩúÈáè" value={`${stats.monthlyNotes}ÁØá`} />
          <StatisticCard title="Âàõ‰ΩúÈ´òÂ≥∞Êúü" value={stats.peakHour} />
          <StatisticCard
            title="ÂçïÁØáÂπ≥ÂùáÂ≠óÊï∞"
            value={`${parseFloat(stats.averageNoteLength).toFixed(1)}Â≠ó`}
          />
          <StatisticCard
            title="ÂÜÖÂÆπÊõ¥Êñ∞È¢ëÁéá"
            value={`${parseFloat(stats.updateFrequency).toFixed(1)}Â∞èÊó∂`}
          />
          <StatisticCard
            title="Âπ≥ÂùáÊØèÁØáÊõ¥Êñ∞Ê¨°Êï∞"
            value={`${parseFloat(stats.averageUpdateCount).toFixed(1)}Ê¨°`}
          />
          <StatisticCard title="ÊúÄËøëÊõ¥Êñ∞Á¨îËÆ∞" value={stats.latestUpdatedNote} />
        </div>

        {/* TOP5Â±ïÁ§∫Âå∫Âüü */}
        <List
          header={<div style={{ fontWeight: 'bold' }}>Ê†áÁ≠æ TOP5</div>}
          bordered
          dataSource={stats.topTags}
          renderItem={(item) => (
            <List.Item>
              <span style={{ marginRight: '8px' }}>üè∑Ô∏è</span>
              {`${item.tag} (${item.count}Ê¨°)`}
            </List.Item>
          )}
          style={{ marginBottom: '24px' }}
        />

        <List
          header={<div style={{ fontWeight: 'bold' }}>ÂàÜÁ±ª TOP5</div>}
          bordered
          dataSource={stats.topCategories}
          renderItem={(item) => (
            <List.Item>
              <span style={{ marginRight: '8px' }}>üìÅ</span>
              {`${item.category} (${item.count}Ê¨°)`}
            </List.Item>
          )}
        />
      </Content>
    </Layout>
  );
};

export default Statistics;
